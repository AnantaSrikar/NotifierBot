import pandas as pd
import numpy as np
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-v', '--verbose', action='store_true', help='This code will help the scrapBois notified of the new cases')
args = parser.parse_args()

"""
Takes values from the CSVs generated by scrapeHelperBoi.py
Run the script to get Dashboard.csv
J&K is ignored right now for convinience
Reading only from 3 sources: DeccanHearld, MOHFW and Worldometer
Rest sources need to be added
Update: no need to take an extra step and call any fuction
"""
def generateTable():
	if(args.verbose):
		print('Started making dashboard...\nReading temporary files')
	try:
		dh = pd.read_csv("DeccanHerald.csv")    #Reading DeccanHerald values
		mhw = pd.read_csv("MOHFW.csv")          #Reading MOHFW values
	
	except Exception as e:
		print('Failed to retrieve data, Error : {}'.format(e))

	dh = dh.drop([0,1,2])
	mhw = mhw.drop([0,1,2])

	#Typo in MOHFW file
	ind = mhw[mhw['0']=='Telengana'].index
	mhw.loc[ind,'0'] = "Telangana"

	indexes = []
	for index, row in dh.iterrows():
		if row['Unnamed: 0'] == 1:
			indexes.append(row['0'])

	new_df = pd.DataFrame(columns=['State','Deccan Herald','MOHFW'])
	new_df.State = indexes
	new_df.set_index('State',inplace=True)

	#DeccanHerald
	for index,row in dh.iterrows():
		if row['Unnamed: 0'] == 1:
			state = row['0']
		if row['Unnamed: 0'] == 2:
			if(state=='Jammu and Kashmir'): 
				continue
			new_df.loc[state]['Deccan Herald'] = int(row['0'])

	#MOHFW
	for index,row in mhw.iterrows():
		if row['Unnamed: 0'] == 1:
			state = row['0']
		if row['Unnamed: 0'] == 2:
			if((state not in indexes)|(state=='Jammu and Kashmir')):
				continue
			new_df.loc[state]['MOHFW'] = int(row['0'])

	# Removing unwanted states 
	new_df = new_df.replace(0,np.NaN)       
	new_df = new_df.dropna(how="all")
	new_df.fillna(0,inplace=True)
	new_df = new_df.astype(int)

	#Worldometer
	wordf = pd.read_csv("Worldometer.txt")
	col = wordf.columns[0]
	wordn = int(col.split(': ')[1])
	wordd = int(wordf[col][0].split(': ')[1])
	new_df['Worldometer'] = np.NaN
	new_df.loc['Total cases','Worldometer']=wordn
	new_df.loc['Total deaths','Worldometer']=wordd

	# new_df stores the final dashboard DataFrame 
	new_df.to_csv("Dashboard.csv")